components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: ['user', 'admin']
        mobile:
          type: string
        location:
          type: string
        bloodGroup:
          type: string
        dateOfBirth:
          type: string
        lastDonatedDate:
          type: string
        gender:
          type: string      
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user
        mobile: '9988776655'
        location: fake location
        bloodGroup: A+
        dateOfBirth: 1990-01-01
        lastDonatedDate: 2020-01-01
        gender: male
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z
    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'
      example:
        access:
          token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
          expires: 2020-05-12T16:18:04.793Z
        refresh:
          token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
          expires: 2020-05-12T16:18:04.793Z
    Requests:
      type: object
      properties:
        userId:
          type: uuid
        name:
          type: string
        mobile:
          type: string
        problem:
          type: string
        email:
          type: string
          format: email
        location:
          type: string
        needDate:
          type: string
          format: date-time
        bloodGroup:
          type: string  
        status:
          type: string
          enum: ['pending', 'accepted', 'rejected','completed']
      example:
        userId: 'uuid-1234-5678-91011'
        name: 'fake name'
        mobile: '9988776655'
        problem: 'fake problem'
        email: 'fake-req@example.com'
        location: fake location
        needDate: '2020-05-12'
        bloodGroup: 'A+'
        replacementBloodGroup: 'A+'
        status: pending
    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    DuplicateMobile:
      description: Mobile already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Mobile already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            message: Internal server error
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Bad request
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT